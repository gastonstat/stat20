---
title: "Practice: Computing Probabilities"
---

```{r setup, include=FALSE, message=FALSE}
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
library(tidyverse)
```


## 1) Box with balls

Consider a box containing 10 balls: 4 blue and 6 red, as displayed in the 
following figure. Assume you pick a 1st ball, then a 2nd ball (no replacement).

![](images/draw-2balls-no-replace.png){fig-align="center" width=50%}

Find the probability that:

a) both balls are blue.

b) both balls are red.

c) 1st is blue, 2nd is red.

d) 1st is red, 2nd is blue.

e) 2nd is blue, given 1st is red.

f) 2nd is blue, given 1st is blue.

g) 1st is blue, given 2nd is red.

h) at least one of them is blue.

i) both are of the same color.

::: {.callout-note collapse="true"}
## Show answers

a) (4/10)(3/9) = 12/90
b) (6/10)(5/9) = 30/90
c) (4/10)(6/9) = 24/90
d) (6/10)(4/9) = 24/90
e) 4/9
f) 3/9
g) 4/9
h) 1 - P(no blues) = 1 - (6/10)(5/9) = 60/90
i) P(2 blues) + P(2 reds) = (12/90) + (30/90) = 42/90

:::


## 2) Box with balls and R code

```r
library(tidyverse)
```

Refer to the box of the preceding problem. The following code allows you to 
simulate drawing 2 balls from the box 100 times---via `replicate()`. In order
to use _tidyverse_ functions, we need to reshape the `simulations` output into
a data.frame.

```{r}
set.seed(2024)

box = c(rep("red", 6), rep("blue", 4))

# simulate drawing 2 balls, 100 times
simulations = replicate(
  n = 100,
  expr = sample(box, size = 2))

# table output (as a data frame)
rownames(simulations) = c("first", "second")
balls_df = data.frame(t(simulations))

head(balls_df)
```

### Examples

Say we want to approximate probability of getting a first blue ball.

```{r}
# proportion: 1st ball is blue
balls_df |>
  summarize(prop_1blue = mean(first == "blue"))
```


What if we we want to approximate probability of getting the first ball blue,
and the second ball red?

```{r}
# proportion: 1st is blue, 2nd is red
balls_df |>
  summarize(prop_1blue_2red = mean(first == "blue" & second == "red"))
```

### Your Turn

Change the value of `set.seed()` and increase the number of simulations to `1000`.
Write R pipelines to approximate the following probabilities. How do these approximations compare to the probabilities you calculated? 

a) Approximate the probability that both balls are blue.

```{r}
#| code-fold: true
#| code-summary: "Show answer"
#| eval: false
balls_df |>
  summarize(mean(first == "blue" & second == "blue"))
```

b) Approximate the probability that 1st ball is red, 2nd ball is blue.

```{r}
#| code-fold: true
#| code-summary: "Show answer"
#| eval: false
# b) 1st is red, 2nd is blue
balls_df |>
  summarize(mean(first == "red" & second == "blue"))
```

c) Approximate the probability that both balls are red.

```{r}
#| code-fold: true
#| code-summary: "Show answer"
#| eval: false
# c) both are red
balls_df |>
  summarize(mean(first == "red" & second == "red"))
```

d) Approximate the probability 1st ball is blue or 2nd ball is blue.

```{r}
#| code-fold: true
#| code-summary: "Show answer"
#| eval: false
# d) 1st is blue OR 2nd is blue
balls_df |>
  summarize(mean(first == "blue" | second == "blue"))
```

e) Approximate the probability 2nd ball is blue, given 1st ball is red.

```{r}
#| code-fold: true
#| code-summary: "Show answer"
#| eval: false
# e) 2nd is blue, given that 1st is red
balls_df |>
  filter(first == "red") |>
  summarize(mean(second == "blue"))
```

f) Approximate the probability 2nd ball is blue, given 1st ball is blue.

```{r}
#| code-fold: true
#| code-summary: "Show answer"
#| eval: false
# f) 2nd is blue, given that 1st is blue
balls_df |>
  filter(first == "blue") |>
  summarize(mean(second == "blue"))
```

g) Approximate the probability 1st ball is blue, given 2nd ball is red. 

```{r}
#| code-fold: true
#| code-summary: "Show answer"
#| eval: false
# g) 1st is blue, given that 2nd is red
balls_df |>
  filter(second == "red") |>
  summarize(mean(first == "blue"))
```



