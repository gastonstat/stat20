---
title: "Multiple Linear Regression"
format:
  stat20slides-revealjs:
    chalkboard: true
---

```{r}
#| message: false
library(tidyverse)
library(stat20data)
library(plotly)
library(reshape2)
```

## Agenda

-   Announcements

-   Linear Regression Refresher
    + Simple Linear Regression
    + Multiple Linear Regression

-   Practice Problems on Regression

- Lab 3.2 __Flights__


## Announcements: Quiz 2

:::{.poll}
**Quiz-2 next Monday, Sep 29th in class.**

+ Section 1, 8am in Barker 101
+ Section 8, 10am in SOCS 60
:::

- Topics:
    + Summarizing Numerical Data
    + A Grammar of Graphics
    + Conditioning
    + Summarizing Associations
    + Multiple Linear Regression


# Linear Regression Refresher 


## Simple Linear Regression Models in R

Function `lm()`

```r
# simple linear regression
mod <- lm(formula = y ~ x, data = dataset)
```

\

- `y`: response variable
- `x`: predictor variable
- `data`: name of data frame

. . .

- `coefficients(mod)`: regression coeffs
- `fitted(mod)`: predicted values
- `residuals(mod)`: residuals


## Multiple Linear Regression Models in R

Function `lm()`

```r
# multiple linear regression
mod <- lm(formula = y ~ x1 + x2 + ..., data = dataset)
```

\

- `y`: response variable
- `x1`, `x2`, `...`: predictor variables
- `data`: name of data frame

. . .

- `coefficients(mod)`: regression coeffs
- `fitted(mod)`: predicted values
- `residuals(mod)`: residuals


# Examples


## Penguins Data

```{r}
#| echo: true
penguins |> 
  select(c(1:4, 6:7)) |> 
  slice_sample(n = 5)
```


# Simple Regression: 2 numerical

## Simple Regression: 2 numerical

```{r}
#| echo: true
#| output-location: fragment
# model 1
m1 <- lm(formula = bill_depth_mm ~ bill_length_mm, data = penguins)
m1
```

. . .

$$
\widehat{\texttt{bill_depth_mm}} = 20.786 -0.0823 \ \texttt{bill_length_mm} 
$$


## Simple Regression: 2 numerical

```{r}
#| echo: true
# model 1
m1 <- lm(formula = bill_depth_mm ~ bill_length_mm, data = penguins)
m1
```

```{r}
countdown::countdown(1, top = 0)
```

:::{.poll}
How can we interpret the coefficient associated to `bill_length_mm`?
:::


## Simple Regression: 2 numerical

```{r}
#| echo: true
# model 1
m1 <- lm(formula = bill_depth_mm ~ bill_length_mm, data = penguins)
m1
```


\

For every additional millimeter in __bill length__, we expect __bill depth__ to decrease
by 0.08233 millimeters.


# Multiple Regression: 3 numerical 

## Multiple Regression: 3 numerical

```{r}
#| echo: true
#| output-location: fragment
# model 2
m2 <- lm(formula = bill_depth_mm ~ bill_length_mm + body_mass_g, 
         data = penguins)
m2
```

. . .

$$
\widehat{\texttt{bill_depth_mm}} = 21.278 + 0.0273 \ \texttt{bill_length_mm} \\ - 0.0012 \ \texttt{body_mass_g}
$$


## Multiple Regression: 3 numerical

```{r}
#| echo: true
# model 2
m2 <- lm(formula = bill_depth_mm ~ bill_length_mm + body_mass_g, 
         data = penguins)
m2
```

```{r}
countdown::countdown(1, top = 0)
```

:::{.poll}
How can we interpret the coefficient associated to `bill_length_mm`?
:::


## Multiple Regression: 3 numerical

```{r echo = TRUE}
# model 2
m2 <- lm(formula = bill_depth_mm ~ bill_length_mm + body_mass_g, 
         data = penguins)
m2
```

\

For penguins of the same __body mass__, an additional millimeter in __bill length__ is 
associated with an increase of 0.0273 millimeters in __bill depth__.


## Multiple Regression: 3 numerical

```{r}
#| echo: true
# model 2
m2 <- lm(formula = bill_depth_mm ~ bill_length_mm + body_mass_g, 
         data = penguins)
m2
```

```{r}
countdown::countdown(1, top = 0)
```

. . .

:::{.poll}
How can we interpret the coefficient associated to `body_mass_g`?
:::


## Multiple Regression: 3 numerical

```{r echo = TRUE}
# model 2
m2 <- lm(formula = bill_depth_mm ~ bill_length_mm + body_mass_g, 
         data = penguins)
m2
```

\

For penguins of the same __bill length__, an additional gram in __body mass__ is 
associated with a decrease of 0.0012 millimeters in __bill depth__.


# Multiple Regression: 2 numerical, 1 categorical

## Multiple Regression: 2 numerical, 1 categorical

```{r}
#| echo: true
#| output-location: fragment
# model 3
m3 <- lm(formula = bill_depth_mm ~ bill_length_mm + sex, 
         data = penguins)
m3
```

. . . 

$$
\widehat{\texttt{bill_depth_mm}} = 22.56 -0.145 \ \texttt{bill_length_mm} \quad \tiny{female} \\
\widehat{\texttt{bill_depth_mm}} = (22.56 + 2.013) -0.145 \ \texttt{bill_length_mm} \quad \tiny{male}
$$


## Multiple Regression: 2 numerical, 1 categorical

```{r}
#| echo: true
# model 3
m3 <- lm(formula = bill_depth_mm ~ bill_length_mm + sex, 
         data = penguins)
m3
```

```{r}
countdown::countdown(1, top = 0)
```

. . .

:::{.poll}
How can we interpret the coefficient associated to `bill_length_mm`?
:::


## Multiple Regression: 2 numerical, 1 categorical

```{r}
#| echo: true
# model 3
m3 <- lm(formula = bill_depth_mm ~ bill_length_mm + sex, 
         data = penguins)
m3
```

\

For penguins of the same __sex__, an additional millimeter in __bill length__ is 
associated with a decrease of 0.1458 millimeters in __bill depth__.


## Multiple Regression: 2 numerical, 1 categorical

```{r}
#| echo: true
# model 3
m3 <- lm(formula = bill_depth_mm ~ bill_length_mm + sex, 
         data = penguins)
m3
```

```{r}
countdown::countdown(1, top = 0)
```

. . .

:::{.poll}
How can we interpret the coefficient associated to `sexmale`?
:::


## Multiple Regression: 2 numerical, 1 categorical

```{r}
#| echo: true
# model 3
m3 <- lm(formula = bill_depth_mm ~ bill_length_mm + sex, 
         data = penguins)
m3
```

\

For penguins of the same __bill length__, __male__ penguins are expected to
have a __bill depth__ 2.0133 millimeters bigger than females.


## Multiple Regression: 2 numerical, 1 categorical

```{r}
#| echo: true
# model 3
m3 <- lm(formula = bill_depth_mm ~ bill_length_mm + sex, 
         data = penguins)
m3
```

```{r}
countdown::countdown(1, top = 0)
```

. . .

:::{.poll}
How can we interpret the `intercept` term?
:::


## Multiple Regression: 2 numerical, 1 categorical

```{r}
#| echo: true
# model 3
m3 <- lm(formula = bill_depth_mm ~ bill_length_mm + sex, 
         data = penguins)
m3
```

\

The value that we would expect __bill depth__ to take when __bill length__ 
is 0, and __sex__ is female.


# More Questions

## Number of Coefficients

```{r}
#| echo: true
lm1 <- lm(bill_depth_mm ~ bill_length_mm, 
          data = penguins)

lm2 <- lm(bill_depth_mm ~ bill_length_mm + species, 
          data = penguins)

lm3 <- lm(bill_depth_mm ~ bill_length_mm + body_mass_g, 
          data = penguins)

lm4 <- lm(bill_depth_mm ~ bill_length_mm + body_mass_g + sex, 
          data = penguins)
```

```{r}
countdown::countdown(2, top = 0)
```

:::{.poll}
What's the number of coefficients in each model?
:::

:::notes
Remind students that they need to remember whether `species` and `body_mass_g` are numerical or categorical. Students should know how many species there are (three). 

One addl. coefficient for body mass; two addl. for species (one less than the number of species, which is three). This gives a total of three more coefficients.
:::


## Visualizing Linear Models

```{r}
#| echo: true
lm1 <- lm(bill_depth_mm ~ bill_length_mm, 
          data = penguins)

lm2 <- lm(bill_depth_mm ~ bill_length_mm + species, 
          data = penguins)

lm3 <- lm(bill_depth_mm ~ bill_length_mm + body_mass_g, 
          data = penguins)
```

```{r}
countdown::countdown(1.5, top = 0)
```

:::{.poll}
How would each model best be visualized?
:::

:::notes
lm1 with a line; lm2 with 2 parallel lines (one for each sex); lm3 with planes in a 3D space. The indicator coefficients will shift the planes up and down. There are three species, so three parallel planes is what we are looking for.
:::


## Visualizing `lm1` (2 numerical)

```{r}
#| fig-align: center
penguins %>%
  ggplot(aes(x = bill_length_mm,
             y = bill_depth_mm)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  theme_bw()
```


## Visualizing `lm2` (2 numerical, 1 categorical)

```{r}
#| fig-align: center

# model 2
m2 = lm(bill_depth_mm ~ bill_length_mm + species, data = penguins)

ggplot(data = penguins,
       aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point(aes(color = species)) + 
  scale_color_manual(values = c("tomato", "orange", "blue")) +
  theme(legend.position = "bottom") + 
  geom_abline(slope = coefficients(m2)[2], # Adelie (baseline)
              intercept = coefficients(m2)[1], 
              color = "tomato") + 
  geom_abline(slope = coefficients(m2)[2], # Chinstrap
              intercept = coefficients(m2)[1] + coefficients(m2)[3], 
              color = "orange") + 
  geom_abline(slope = 0.2004431, # Gentoo
              intercept = 10.5652616 + -5.1033153, 
              color = "blue") +
  theme_bw()
```


## Visualizing `lm3` (3 numerical)

```{r, fig.width=14, fig.height=10}
p <- plot_ly(data = penguins, 
             x = ~bill_length_mm, 
             y = ~body_mass_g, 
             z = ~bill_depth_mm, 
             showlegend=FALSE) |> 
  add_markers(marker = list(size = 5,
                            opacity = .6,
                            color = "steelblue"))

m1 <- lm(bill_depth_mm ~ bill_length_mm + body_mass_g, data = penguins)
grid_points <- 30
axis_x <- seq(min(penguins$bill_length_mm), 
              max(penguins$bill_length_mm),
              length.out = grid_points)
axis_y <- seq(min(penguins$body_mass_g), 
              max(penguins$body_mass_g),
              length.out = grid_points)
penguins_plane <- expand.grid(bill_length_mm = axis_x, 
                           body_mass_g = axis_y, 
                           KEEP.OUT.ATTRS = F)
penguins_plane$bill_depth_mm <- predict.lm(m1, newdata = penguins_plane)
z <- acast(penguins_plane, bill_length_mm ~ body_mass_g, value.var = "bill_depth_mm")


p |> 
  add_surface(x = axis_x,
              y = axis_y,
              z = z, showscale=FALSE,
              colorscale = list(c(0, 1), c("tan", "tan")),
              name = "Linear Model")
```


# tinyurl.com/2hj5x7k3

Practice Problems

```{r}
countdown::countdown(minutes = 25, top = 0)
```


# Lab 3.2) Flights

```{r}
countdown::countdown(minutes = 45, top = 0)
```


# End of Lecture

<!---

# Concept Questions

## Estimate the coefficient

```{r}
countdown::countdown(1, top = 0)
```

```{r}
library(tidyverse)
library(stat20data)
```

\
\

```{r}
#| echo: true
m1 <- lm(bill_depth_mm ~ bill_length_mm, data = penguins)
```

\
\
\

:::{.poll}
What will be the sign of the coefficient for `bill_length_mm`?
:::

:::notes
This one warms students up to the idea of working between the formula, the equation of the line, and a plot. It will also likely surprise them: without controlling for the species, there's actually a slight negative relationship here.
:::


## 

```{r}
#| echo: true
m1
```

. . .

```{r}
#| fig-align: center
penguins %>%
  ggplot(aes(x = bill_length_mm,
             y = bill_depth_mm)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  theme_bw()
```


## Estimate the coefficient, take two

```{r}
countdown::countdown(1, top = 0)
```

\

```{r}
#| echo: true
m2 <- lm(bill_depth_mm ~ bill_length_mm + species, penguins)
```

\
\
\

:::{.poll}
What will be the sign of the coefficient for `bill_length_mm`? How many coefficients will be in this linear model?
:::

:::notes
After the first question, some should get the second one correct, but the fact that it can change may surprise some students. They haven't need an example of a categorical variable with more than k = 2 levels, so it will be challenging for them to think through how many coefficients are required (since there are k = 3 levels, there are k = 3-1 dummy variables required, for a total of 4 coefficients.)

You may want to follow this question up by drawing on a board a data frame with `bill_length_mm` and `species` and show how you need to mutate two new dummy variables. You can also mention that by default, R leaves as the references level the one which comes first alphabetically.
:::

## 

```{r}
#| fig-align: center

penguins <- mutate(penguins, yhat = fitted(m2))

penguins %>%
  ggplot(aes(x = bill_length_mm,
             y = bill_depth_mm,
             color = species)) +
  geom_point() +
  geom_line(aes(y = yhat, 
                group = species,
                color = species),
            lwd = 1.5) +
  theme_bw(base_size = 13)
```

##

```{r}
#| echo: true
m2
```

. . .

**Dummy Variable**

A variable that is 1 if an observation takes a particular level of a categorical variable and 0 otherwise. A categorical variable with $k$ levels can be encoded using $k - 1$ dummy variables.


## Interpreting coefficients

```{r}
countdown::countdown(1, top = 0)
```

\

```{r}
#| echo: true
m2
```

:::poll
Which is the correct interpretation of the coefficient in front of Gentoo?
:::

:::notes
This one assess their ability to use a conditional interpretation of a regression coefficient (controlling for the other variables in the model...)
:::

## Concept Question 4

Consider the following linear regression output where the variable `school` is categorical and the variable `hours_studied` is numerical.

```{r, out.width = "60%"}
#| eval: false
#| echo: true
#| fig-align: center
lm(GPA ~ hours_studied + school, data = edu)
```

\   
\   

| Coefficients     | Estimate |
| ----------- | ----------- |
| `(Intercept)`      | 2.5       |
| `hours_studied`        | .2        |
| `schoolCal`      | 1       |
| `schoolStanford`        | -1      |

. . . 

## Concept Question 4 (cont.)

-   Say I wanted to create a data frame from the original `edu` dataframe which contains the minimum, median, and IQR for `hours_studied` among each school. In order to do this, I make use of `group_by()` followed by `summarize()`. I save this data frame into an object called `GPA_summary`.


:::poll
What are the dimensions of `GPA_summary`?
:::


:::notes
The correct answer in the poll should be 3x3. The three columns are for each of the statistics calculated; the three rows are for the three levels in the school category (there *is* an additional level beyond `"Cal"` and `"Stanford"`, regardless if it is not stated). 

This was a former final question.
:::

```{r}
countdown::countdown(1, top = 0)
```

-->



<!-- ## MLR Geometry -->

<!-- . . . -->

<!-- ```{r} -->
<!-- countdown::countdown(1, top = 0) -->
<!-- ``` -->

<!-- ```{r} -->
<!-- zagat <- read_csv("https://www.dropbox.com/s/c797oanmvdzjegt/zagat.csv?dl=1") -->
<!-- ``` -->

<!-- ```{r} -->
<!-- #| echo: true -->
<!-- m3 <- lm(price ~ food + decor + geo, data = zagat) -->
<!-- ``` -->

<!-- :::poll -->
<!-- What is the geometry described by this model? -->
<!-- ::: -->

<!-- ::: -->
<!-- The answer is two parallel planes. -->

<!-- This is to test their ability to extrapolate from the examples they've seen in the notes. It's also to have fun spinning a 3D scatter plot. -->

<!-- Students might ask about higher dim, where these models describe "hyperplanes". -->
<!-- ::: -->


<!-- ## -->

<!-- ```{r} -->
<!-- #| code-fold: false -->
<!-- #| echo: false -->
<!-- #| eval: false -->
<!-- library(plotly) -->
<!-- library(reshape2) -->

<!-- grid_points <- 30 -->
<!-- axis_x <- seq(min(zagat$food), -->
<!--               max(zagat$food), -->
<!--               length.out = grid_points) -->
<!-- axis_y <- seq(min(zagat$decor), -->
<!--               max(zagat$decor), -->
<!--               length.out = grid_points) -->
<!-- zagat_plane <- expand.grid(food = axis_x, -->
<!--                          decor = axis_y, -->
<!--                          KEEP.OUT.ATTRS = F) -->
<!-- zagat_plane$price <- predict.lm(m3, newdata = zagat_plane) -->
<!-- z <- acast(zagat_plane, food ~ decor + geo, value.var = "price") -->
<!-- p <- plot_ly(zagat, x = ~food, y = ~decor, z = ~price, showlegend=FALSE) %>% -->
<!--   add_markers(marker = list(size = 5, -->
<!--                             opacity = .6, -->
<!--                             color = "steelblue"), -->
<!--               name = ~restaurant) %>% -->
<!--   config(displayModeBar = FALSE) -->
<!-- p %>% -->
<!--   add_surface(x = axis_x, -->
<!--               y = axis_y, -->
<!--               z = z, showscale=FALSE, -->
<!--               colorscale = list(c(0, 1), c("tan", "tan")), -->
<!--               name = "Linear Model") -->
<!-- ``` -->

<!-- ```{r} -->
<!-- library(plotly) -->
<!-- library(reshape2) -->
<!-- m1 <- lm(price ~ food + decor, data = zagat) -->
<!-- grid_points <- 30 -->
<!-- axis_x <- seq(min(zagat$food),  -->
<!--               max(zagat$food), -->
<!--               length.out = grid_points) -->
<!-- axis_y <- seq(min(zagat$decor),  -->
<!--               max(zagat$decor), -->
<!--               length.out = grid_points) -->
<!-- zagat_plane <- expand.grid(food = axis_x,  -->
<!--                          decor = axis_y,  -->
<!--                          KEEP.OUT.ATTRS = F) -->
<!-- zagat_plane$price <- predict.lm(m1, newdata = zagat_plane) -->
<!-- z <- acast(zagat_plane, food ~ decor, value.var = "price") -->

<!-- m2 <- lm(price ~ food + decor + geo, data = zagat) -->

<!-- zagat_plane_geo <- zagat_plane %>% -->
<!--   mutate(geo = 1) -->
<!-- zagat_plane_geo$price <- predict.lm(m2, newdata = zagat_plane_geo) -->
<!-- z_geo <- acast(zagat_plane_geo, food ~ decor, value.var = "price") -->
<!-- zagat_plane_west <- zagat_plane %>% -->
<!--   mutate(geo = 0) -->
<!-- zagat_plane_west$price <- predict.lm(m2, newdata = zagat_plane_west) -->
<!-- z_west <- acast(zagat_plane_west, food ~ decor, value.var = "price") -->

<!-- plot_ly(zagat, x = ~food, y = ~decor, z = ~price) %>% -->
<!--   add_markers(marker = list(size = 5, -->
<!--                             opacity = .6)) %>% -->
<!--   add_surface(x = ~axis_x,  -->
<!--               y = ~axis_y,  -->
<!--               z = ~z_geo, -->
<!--               showscale = FALSE) %>% -->
<!--   add_surface(x = ~axis_x,  -->
<!--               y = ~axis_y,  -->
<!--               z = ~z_west, -->
<!--               showscale = FALSE) -->
<!-- ``` -->

